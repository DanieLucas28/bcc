else
{ if (conf > 0 & conf < 1)
{
probucl<-0.99865
problcl<-0.00135
alfa<-center*(((center*(1-center))/(std.dev^2))-1)
beta<-(1-center)*(((center*(1-center))/(std.dev^2))-1)
lcl <-qbeta(problcl, alfa, beta)
ucl <-qbeta(probucl, alfa, beta)
}
else stop("invalid conf argument. See help.")
}
limits <- matrix(c(lcl, ucl), ncol = 2)
rownames(limits) <- rep("", length = nrow(limits))
colnames(limits) <- c("LCL", "UCL")
return(limits)
}
limits.beta <- function(center, std.dev, sizes, conf, ...)
{
probucl<-0.99865
problcl<-0.00135
sizes <- as.vector(sizes)
n<-mean(sizes)
alfa<-center*(((center*(1-center))/((center*(1-center))/n))-1) #=B5*(((B5*(1-B5))/((B5*(1-B5))/B4))-1)
beta<-(1-center)*(((center*(1-center))/((center*(1-center))/n))-1) #=(1-B5)*(((B5*(1-B5))/((B5*(1-B5))/B4))-1)
if (conf >= 1)
{
show("without application, determine another value for confidence.level")
}
else
{ if (conf > 0 & conf < 1)
{
lcl <-qbeta(problcl, alfa, beta)
ucl <-qbeta(probucl, alfa, beta)
}
else stop("invalid conf argument. See help.")
}
limits <- matrix(c(lcl, ucl), ncol = 2)
rownames(limits) <- rep("", length = nrow(limits))
colnames(limits) <- c("LCL", "UCL")
return(limits)
}
bcc(Montgomery2005$PD, sizes = Montgomery2005$TODA, type = "beta", confidence.level = 0.9)
library(readxl)
Database_MDB_1_ <- read_excel("C:/Users/danie/Desktop/Beta Charts - r/Database MDB (1).xlsx",
sheet = "PC X PA")
View(Database_MDB_1_)
bcc(Database_MDB_1_$razao, type = "beta.prop", confidence.level = 0.9)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library("bcc")
library(readxl)
Montgomery2005 <- read_excel("C:/Users/danie/Desktop/Beta Charts - r/Montgomery2005.xlsx")
View(Montgomery2005)
bcc(Database_MDB_1_$razao, type = "beta.prop", confidence.level = 0.9)
library(readxl)
Database_MDB_1_ <- read_excel("C:/Users/danie/Desktop/Beta Charts - r/Database MDB (1).xlsx",
sheet = "PC X PA")
View(Database_MDB_1_)
bcc(Database_MDB_1_$razao, type = "beta.prop", confidence.level = 0.9)
bcc(Montgomery2005$PD, sizes = Montgomery2005$TODA, type = "beta", confidence.level = 0.9)
library(readxl)
Montgomery2005 <- read_excel("C:/Users/danie/Desktop/Beta Charts - r/Montgomery2005.xlsx")
View(Montgomery2005)
matrix(data = sample(1:50, size = 10, replace = FALSE), nrow = 1, ncol = 1)
x<-sample(1:50, size = 10)
matrix(data = sample(x, size = 10, replace = FALSE), nrow = 1, ncol = 1)
matrix(data = x, nrow = 1, ncol = 1)
matrix(data = x, nrow = 1, ncol = 1, byrow = FALSE)
matrix(data = x, nrow = 1, ncol = 1, byrow = FALSE)
matrix(data = x, nrow = 1, ncol = 1, byrow = TRUE)
library(readxl)
Pasta1 <- read_excel("C:/Users/danie/Desktop/Pasta1.xlsx")
View(Pasta1)
View(Pasta1)
library(readxl)
Pasta1 <- read_excel("C:/Users/danie/Desktop/Pasta1.xlsx",
sheet = "Planilha2")
View(Pasta1)
library(readxl)
Drapper1998 <- read_excel("C:/Users/danie/Desktop/Beta Charts - r/Drapper1998.xlsx")
View(Drapper1998)
View(Montgomery2005)
library(readxl)
Database_MDB_1_ <- read_excel("C:/Users/danie/Desktop/Beta Charts - r/Database MDB (1).xlsx",
sheet = "PC X PA")
View(Database_MDB_1_)
library("bcc", lib.loc="F:/Program Files/R/R-3.5.1/library")
library(bcc)
install.packages(qcc)
install.packages("qcc")
library("bcc", lib.loc="F:/Program Files/R/R-3.5.1/library")
bcc(Montgomery2005, data = Montgomery2005$PD, sizes = Montgomery2005$TODA, type = "beta")
bcc(Montgomery2005, data = Montgomery2005$PD, sizes = Montgomery2005$TODA, type = "beta", confidence.level = 0.9)
devtools::install_github("danielucas28/bcc")
library("qcc", lib.loc="F:/Program Files/R/R-3.5.1/library")
remove.packages("qcc")
bcc(Montgomery2005, data = Montgomery2005$PD, sizes = Montgomery2005$TODA, type = "beta", confidence.level = 0.9)
library("bcc", lib.loc="F:/Program Files/R/R-3.5.1/library")
bcc(Montgomery2005, data = Montgomery2005$PD, sizes = Montgomery2005$TODA, type = "beta", confidence.level = 0.9)
library("bcc", lib.loc="F:/Program Files/R/R-3.5.1/library")
bcc(Montgomery2005, data = Montgomery2005$PD, sizes = Montgomery2005$TODA, type = "beta", confidence.level = 0.9)
library(readxl)
Montgomery2005 <- read_excel("C:/Users/danie/Desktop/Beta Charts - r/Montgomery2005.xlsx")
View(Montgomery2005)
bcc(Montgomery2005, data = Montgomery2005$PD, sizes = Montgomery2005$TODA, type = "beta", confidence.level = 0.9)
#' Beta Control Charts
#'
#' p-Charts and np-Charts are commonly used in monitoring variables of the fraction type and these charts assume that the monitored variables are binomially distributed. In this paper we propose a new control chart called Beta Charts, for monitoring fraction data (p). The Beta Chart presents the control limits based on the Beta probability distribution. It was applied for monitoring the variables in three real studies, and it was compared to the control limits with three schemes. The comparative analysis showed that: (i) Beta approximation to the Binomial distribution was more appropriate with values confined in the [0, 1]- interval; and (ii) the charts proposed were more sensitive to the average run length (ARL), in both in-control and out-of-control processes monitoring. The Beta Charts outperform the control charts analyzed for monitoring fraction data.
#'
#'
#'
#' @export bcc
#' @import qcc
#' @reference SANT'ANNA, Ângelo M. O; CATEN, Carla Schwengberten. Beta control charts for monitoring fraction data. Expert Systems With Applications, p. 10236-10243. 1 set. 2012.
bcc<-function(data, type = c("beta", "beta.prop"),
sizes, center, std.dev, limits, data.name, labels, newdata, newsizes,
newdata.name, newlabels, nsigmas = 3, confidence.level, rules = shewhart.rules,
plot = TRUE, ...){
if (bcc == "beta"){
qcc(data = data, sizes = sizes, type = "beta", confidence.level = 0.9)
}
if (type == "beta.prop"){
qcc(data = data, type= "beta.prop", confidence.level = 0.9)
}
}
bcc(type="beta")
#' Beta Control Charts
#'
#' p-Charts and np-Charts are commonly used in monitoring variables of the fraction type and these charts assume that the monitored variables are binomially distributed. In this paper we propose a new control chart called Beta Charts, for monitoring fraction data (p). The Beta Chart presents the control limits based on the Beta probability distribution. It was applied for monitoring the variables in three real studies, and it was compared to the control limits with three schemes. The comparative analysis showed that: (i) Beta approximation to the Binomial distribution was more appropriate with values confined in the [0, 1]- interval; and (ii) the charts proposed were more sensitive to the average run length (ARL), in both in-control and out-of-control processes monitoring. The Beta Charts outperform the control charts analyzed for monitoring fraction data.
#'
#'
#'
#' @export bcc
#' @import qcc
#' @reference SANT'ANNA, Ângelo M. O; CATEN, Carla Schwengberten. Beta control charts for monitoring fraction data. Expert Systems With Applications, p. 10236-10243. 1 set. 2012.
bcc<-function(data, type = c("1", "2"),
sizes, center, std.dev, limits, data.name, labels, newdata, newsizes,
newdata.name, newlabels, nsigmas = 3, confidence.level, rules = shewhart.rules,
plot = TRUE, ...){
res <- type
if (type == 1){
qcc(data = data, type = "beta",
sizes = sizes, center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
if (type == 2){
qcc(data = data, type = "beta.prop",
sizes = sizes, center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
}
#' stats.beta
#'
#' modified qcc functions
#'
#'
#'
#' @export stats.beta
stats.beta <- function(data, sizes)
{
data <- as.vector(data)
sizes<- as.vector(sizes)
pbar <- sum(data)/sum(sizes)
list(statistics = data/sizes, center = pbar)
}
#' stats.beta.prop
#'
#' modified qcc functions
#'
#'
#'
#' @export stats.beta.prop
stats.beta.prop <- function(data, sizes)
{
statistics <- as.vector(data)
center <- mean(statistics)
list(statistics = statistics, center = center)
}
#' sd.beta
#'
#' modified qcc functions
#'
#'
#'
#' @export sd.beta
sd.beta <- function(data, sizes, ...)
{
data <- as.vector(data)
sizes <- as.vector(sizes)
pbar <- sum(data)/sum(sizes)
std.dev <- sqrt(pbar * (1 - pbar))
return(std.dev)
}
#' sd.beta.prop
#'
#' modified qcc functions
#'
#'
#'
#' @export sd.beta.prop
sd.beta.prop <- function(data, sizes, std.dev)
{
data <- as.vector(data)
sd <- sqrt(var(data))
return(sd)
}
#' limits.beta
#'
#' modified qcc functions
#'
#'
#'
#' @export limits.beta
limits.beta <- function(center, std.dev, sizes, conf)
{
probucl<-0.99865
problcl<-0.00135
sizes <- as.vector(sizes)
n<-mean(sizes)
alfa<-center*(((center*(1-center))/((center*(1-center))/n))-1) #=B5*(((B5*(1-B5))/((B5*(1-B5))/B4))-1)
beta<-(1-center)*(((center*(1-center))/((center*(1-center))/n))-1) #=(1-B5)*(((B5*(1-B5))/((B5*(1-B5))/B4))-1)
if (conf >= 1)
{
show("without application, determine another value for confidence.level")
}
else
{ if (conf > 0 & conf < 1)
{
lcl <-qbeta(problcl, alfa, beta)
ucl <-qbeta(probucl, alfa, beta)
}
else stop("invalid conf argument. See help.")
}
limits <- matrix(c(lcl, ucl), ncol = 2)
rownames(limits) <- rep("", length = nrow(limits))
colnames(limits) <- c("LCL", "UCL")
return(limits)
}
#' limits.beta.prop
#'
#' modified qcc functions
#'
#'
#'
#' @export limits.beta.prop
limits.beta.prop <- function(center, std.dev, sizes, conf, ...)
{
if (conf >= 1)
{
show("without application, determine another value for confidence.level")
}
else
{ if (conf > 0 & conf < 1)
{
probucl<-0.99865
problcl<-0.00135
alfa<-center*(((center*(1-center))/(std.dev^2))-1)
beta<-(1-center)*(((center*(1-center))/(std.dev^2))-1)
lcl <-qbeta(problcl, alfa, beta)
ucl <-qbeta(probucl, alfa, beta)
}
else stop("invalid conf argument. See help.")
}
limits <- matrix(c(lcl, ucl), ncol = 2)
rownames(limits) <- rep("", length = nrow(limits))
colnames(limits) <- c("LCL", "UCL")
return(limits)
}
library(readxl)
Drapper1998 <- read_excel("C:/Users/danie/Desktop/Beta Charts - r/Drapper1998.xlsx")
View(Drapper1998)
bcc(data = Drapper1998$PROP, type = "2")
library(qcc)
bcc(data = Drapper1998$PROP, type = "2")
bcc(data = Drapper1998$PROP, type = "2")
#' Beta Control Charts
#'
#' p-Charts and np-Charts are commonly used in monitoring variables of the fraction type and these charts assume that the monitored variables are binomially distributed. In this paper we propose a new control chart called Beta Charts, for monitoring fraction data (p). The Beta Chart presents the control limits based on the Beta probability distribution. It was applied for monitoring the variables in three real studies, and it was compared to the control limits with three schemes. The comparative analysis showed that: (i) Beta approximation to the Binomial distribution was more appropriate with values confined in the [0, 1]- interval; and (ii) the charts proposed were more sensitive to the average run length (ARL), in both in-control and out-of-control processes monitoring. The Beta Charts outperform the control charts analyzed for monitoring fraction data.
#'
#'
#'
#' @export bcc
#' @import qcc
#' @reference SANT'ANNA, Ângelo M. O; CATEN, Carla Schwengberten. Beta control charts for monitoring fraction data. Expert Systems With Applications, p. 10236-10243. 1 set. 2012.
bcc<-function(data, type = c("1", "2"),
sizes, center, std.dev, limits, data.name, labels, newdata, newsizes,
newdata.name, newlabels, nsigmas = 3, confidence.level=0.9, rules = shewhart.rules,
plot = TRUE, ...){
res <- type
if (type == 1){
qcc(data = data, type = "beta",
sizes = sizes, center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
if (type == 2){
qcc(data = data, type = "beta.prop",
center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
}
bcc(data = Drapper1998$PROP, type = "2")
bcc(data = Drapper1998$PROP, type = "2", data.name = "teste mudar nome")
bcc(data = Drapper1998$PROP, type = "2", data.name = Drapper1998)
bcc(data = Drapper1998$PROP, type = "2", data.name = Drapper1998$PROP)
bcc(data = Drapper1998$PROP, type = "2", data.name = "data")
bcc(data = Drapper1998$PROP, type = "2")
bcc(data = Drapper1998$PROP, type = "2")
bcc(data = Drapper1998$PROP, type = "2", labels = "teste")
devtools::build()
devtools::check()
View(limits.beta)
devtools::build()
devtools::check()
bcc<-function(data, type = c("1", "2"),
sizes, center, std.dev, limits, data.name, labels, newdata, newsizes,
newdata.name, newlabels, nsigmas = 3, confidence.level=0.9, rules = shewhart.rules,
plot = TRUE, ...){
res <- type
if (type == 1){
qcc(data = data, type = "beta",
sizes = sizes, center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
if (type == 2){
qcc(data = data, type = "beta.prop",
center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
}
devtools::build()
devtools::check()
library("devtools", lib.loc="F:/Program Files/R/R-3.5.1/library")
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(readxl)
Drapper1998 <- read_excel("C:/Users/danie/OneDrive/�\201rea de Trabalho/Beta Charts - r/Drapper1998.xlsx")
View(Drapper1998)
library(readxl)
Drapper1998 <- read_excel("C:/Users/danie/Desktop/Beta Charts - r/Drapper1998.xlsx")
View(Drapper1998)
library(bcc)
library("bcc")
devtools::install_github(danielucas28/bcc)
devtools::install_github(danielucas/bcc)
devtools::install_github("danielucas28/bcc")
devtools::install_github("danielucas28/bcc")
library("bcc")
library("bcc", lib.loc="F:/Program Files/R/R-3.5.1/library")
bcc(Drapper1998$PROP, type = 2)
bcc(Drapper1998$PROP, type = "2")
devtools::check()
devtools::install_github("danielucas28/bcc")
library("bcc")
bcc(Drapper1998$PROP, type = "2")
devtools::document()
devtools::document()
devtools::build()
usethis::use_data_raw()
experiment1 <-
read.csv('expt1.csv') %>%
mutate(experiment = 1)
devtools::use_data(experiment1)
experiment1 <-
read.csv('expt1.csv')
mutate(experiment = 1)
devtools::use_data(experiment1)
experiment1 <-
read.csv('expt1.csv')
mutate(experiment = 1)
devtools::use_data(experiment1)
library(readxl)
Drapper1998 <- read_excel("C:/Users/danie/Desktop/Beta Charts - r/Drapper1998.xlsx",
col_types = c("blank", "numeric"))
View(Drapper1998)
save(Drapper1998)
save(Drapper1998, file = "Drapper1998data")
## code to prepare `DATASET` dataset goes here
usethis::use_data("Drapper1998data")
## code to prepare `DATASET` dataset goes here
usethis::use_data("Drapper1998data")
## code to prepare `DATASET` dataset goes here
Drapper1998data <- read_excel("data-raw/Drapper1998.xlsx")
usethis::use_data(Drapper1998data)
load("C:/Users/danie/OneDrive/Documentos/GitHub/bcc/data/Drapper1998data.rda")
load("C:/Users/danie/OneDrive/Documentos/GitHub/bcc/data/Drapper1998data.rda")
View(Drapper1998data)
## code to prepare `DATASET` dataset goes here
Drapper1998data <- read_excel("data-raw/Drapper1998.xlsx")
usethis::use_data(Drapper1998data$PROP)
## code to prepare `DATASET` dataset goes here
Drapper1998data <- read_excel("data-raw/Drapper1998$PROP.xlsx")
usethis::use_data(Drapper1998data)
## code to prepare `DATASET` dataset goes here
Drapper1998data <- read_excel("data-raw/Drapper1998$PROP.xlsx")
usethis::use_data(Drapper1998data)
## code to prepare `DATASET` dataset goes here
Drapper1998data <- read_excel("data-raw/Drapper1998$PROP.xlsx")
usethis::use_data(Drapper1998data, overwrite = TRUE)
load("C:/Users/danie/OneDrive/Documentos/GitHub/bcc/data/Drapper1998data.rda")
View(Drapper1998data)
## code to prepare `DATASET` dataset goes here
Drapper1998data <- read_excel("data-raw/Drapper1998.xlsx")
usethis::use_data(Drapper1998data, overwrite = TRUE)
## code to prepare `DATASET` dataset goes here
Drapper1998data <- read_excel("data-raw/Drapper1998.xlsx")
usethis::use_data(Drapper1998data, overwrite = TRUE)
load("C:/Users/danie/OneDrive/Documentos/GitHub/bcc/data/Drapper1998data.rda")
View(Drapper1998data)
boxplot(Drapper1998data)
plot(Drapper1998data)
with(Drapper1998data)
plot(data = Drapper1998data, cex=0.7)
plot(data = Drapper1998data)
plot(Drapper1998data)
devtools::check()
load(Drapper1998data)
data("Drapper1998data")
devtools::check()
devtools::check()
bcc<-function(data, type = c("1", "2"),
sizes, center, std.dev, limits, data.name, labels, newdata, newsizes,
newdata.name, newlabels, nsigmas = 3, confidence.level=0.9, rules = shewhart.rules,
plot = TRUE, ...){
res <- type
if (type == 1){
qcc(data = data, type = "beta",
sizes = sizes, center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
if (type == 2){
qcc(data = data, type = "beta.prop",
center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
}
bcc<-function(data, type = c("1", "2"),
sizes, center, std.dev, limits, data.name, labels, newdata, newsizes,
newdata.name, newlabels, nsigmas = 3, confidence.level=0.9, rules = shewhart.rules,
plot = TRUE, ...){
res <- type
if (type == 1){
qcc(data = data, type = "beta",
sizes = sizes, center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
if (type == 2){
qcc(data = data, type = "beta.prop",
center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
devtools::check()
devtools::check()
bcc<-function(data, type = c("1", "2"),
sizes, center, std.dev, limits, data.name, labels, newdata, newsizes,
newdata.name, newlabels, nsigmas = 3, confidence.level=0.9, rules = shewhart.rules,
plot = TRUE, ...){
res <- type
if (type == 1){
qcc(data = data, type = "beta",
sizes = sizes, center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
if (type == 2){
qcc(data = data, type = "beta.prop",
center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
bcc<-function(data, type = c("1", "2"),
sizes, center, std.dev, limits, data.name, labels, newdata, newsizes,
newdata.name, newlabels, nsigmas = 3, confidence.level=0.9, rules = shewhart.rules,
plot = TRUE, ...){
res <- type
if (type == 1){
qcc(data = data, type = "beta",
sizes = sizes, center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
if (type == 2){
qcc(data = data, type = "beta.prop",
center = center, std.dev = std.dev, limits = limits, data.name = data.name, labels = labels, newdata = newdata, newsizes = newsizes,
newdata.name = newdata.name, newlabels = newlabels, nsigmas = 3, confidence.level = confidence.level, rules = shewhart.rules,
plot = TRUE, ...)
}
}
